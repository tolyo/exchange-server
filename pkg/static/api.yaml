openapi: 3.1.0
info:
  description: |
    # Introduction
    This API is documented in **OpenAPI 3.0 format**.

    This API the following operations:
    * Retrieve a list of available instruments
    * Retrieve a list of executed trades

    # Basics
    * API calls have to be secured with HTTPS.
    * All data has to be submitted UTF-8 encoded.
    * The reply is sent JSON encoded.
  version: 1.0.0
  title: OPEN OUTCRY API
servers:
  - url: http://localhost:4000
security: []
tags:
  - name: user
    description: User facing resources for management by a specific user of their accounts
  - name: public
    description: Public facing resources pertaining to exchange in general
  - name: admin
    description: Admin facing resources for exchange management
paths:
  /currencies:
    get:
      tags:
        - public
      summary: Currencies list
      description: Returns list of available currencies
      operationId: getCurrencies
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyList"
        "404":
          description: Error
  /fxinstruments:
    get:
      tags:
        - public
      summary: Fx instrument list
      description: Returns list of available fx instruments
      operationId: getFxInstruments
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FxInstrumentList"
        "404":
          description: Not found
  /instruments:
    get:
      tags:
        - public
      summary: Instrument list
      description: Returns list of available instruments
      operationId: getInstruments
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstrumentList"
        "404":
          description: Not found
  /order_books/{instrument_name}:
    get:
      tags:
        - public
      summary: Get order book
      description: Returns an order book for an specific instrument
      operationId: getOrderBook
      parameters:
        - in: path
          name: instrument_name
          required: true
          schema:
            $ref: "#/components/schemas/InstrumentName"
      responses:
        "200":
          description: order book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderBook"
        "404":
          description: Order book not found for instrument
  /book_orders/{trading_account_id}:
    get:
      tags:
        - user
      summary: Get book orders
      description: Returns list of user's trade orders currently on the order book
      operationId: getBookOrders
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeOrderList"
        "404":
          description: Error
  /payment-accounts/{app_entity_id}:
    get:
      tags:
        - user
      summary: Get payment accounts
      description: Returns list of user's payment accounts
      operationId: getPaymentAccounts
      parameters:
        - in: path
          name: app_entity_id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAccountList"
        "404":
          description: Error
  /trades/{trading_account_id}/id/{trade_id}:
    get:
      tags:
        - user
      summary: Get trade
      description: Returns a trade by id
      operationId: getTradeById
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
        - $ref: "#/components/parameters/TradeId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        "404":
          description: Error
    delete:
      tags:
        - user
      summary: Cancel trade
      description: Cancels a trade order by id
      operationId: deleteTradeById
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
        - $ref: "#/components/parameters/TradeId"
      responses:
        "204":
          description: Success
        "404":
          description: Error
  /trades/{trading_account_id}:
    get:
      tags:
        - user
      summary: Trades list
      description: Returns list of entity's trades
      operationId: getTrades
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeList"
        "404":
          description: Error
  /trade_orders/{trading_account_id}:
    get:
      tags:
        - user
      summary: Get trade orders
      description: Returns list of user's trade orders
      operationId: getTradeOrders
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeOrderList"
        "404":
          description: Error
    post:
      tags:
        - user
      summary: Create trade order
      description: Creates a trade order
      operationId: createTrade
      parameters:
        - $ref: "#/components/parameters/TradingAccountId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instrument:
                  $ref: "#/components/schemas/InstrumentName"
                side:
                  $ref: "#/components/schemas/TradeOrderSide"
                type:
                  $ref: "#/components/schemas/TradeOrderType"
                timeInForce:
                  $ref: "#/components/schemas/TradeOrderTimeInForce"
                amount:
                  $ref: "#/components/schemas/MoneyAmount"
                price:
                  $ref: "#/components/schemas/MoneyAmount"
              required:
                - instrument
                - side
                - type
                - timeInForce
                - amount
            example:
              instrument: BTC-EUR
              side: SELL
              type: LIMIT
              timeInForce: GTC
              amount: "100"
              price: "100.00"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeOrder"
        "404":
          description: Error
  /trading_account/{trading_account_id}:
    get:
      tags:
        - user
      summary: Get trading account
      description: Returns user's trading account
      operationId: getTradingAccount
      parameters:
        - in: path
          name: trading_account_id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradingAccount"
        "404":
          description: Error
  /apps/{app_entity_id}:
    get:
      tags:
        - admin
      summary: Get application entity
      description: Return registered user by external id
      operationId: getAppEntity
      parameters:
        - in: path
          name: app_entity_id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppEntity"
        "404":
          description: Error
  /apps:
    get:
      tags:
        - admin
      summary: Get application entities
      description: Return a list of registered users
      operationId: getAppEntities
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppEntityList"
        "404":
          description: Error
  /apps/payments/{payment_id}:
    post:
      tags:
        - admin
      summary: Get payment
      description: Returns payment information
      operationId: getAdminPaymentById
      parameters:
        - in: path
          name: payment_id
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "404":
          description: Error
  /apps/payments:
    post:
      tags:
        - admin
      summary: Create admin payment
      description: Creates a payment on user's account
      operationId: createAdminPayment
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "404":
          description: Error
components:
  schemas:
    CurrencyName:
      type: string
      description: ISO 4217 Currency symbol
      example: USD
    Currency:
      type: object
      description: Currency of payment account
      properties:
        name:
          $ref: "#/components/schemas/CurrencyName"
        precision:
          type: integer
          description: Currency precision as number of decimal points
          example: 2
    CurrencyList:
      type: object
      description: List of currencies supported by app
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Currency"
      example:
        data:
          - name: USD
            precision: 2
          - name: BTC
            precision: 5
    Id:
      type: string
      format: uuid
      example: 29b6e916-0d74-41c3-b004-eb8373bca606
    InstrumentName:
      type: string
      description: Ticker-like name of the instrument. For monetary instruments, a currency pair is used.
      example: BTC-EUR
    InstrumentAvailability:
      type: boolean
      description: Availability for trading
      example: true
    FxInstrument:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/InstrumentName"
        quote_currency:
          $ref: "#/components/schemas/CurrencyName"
        enabled:
          $ref: "#/components/schemas/InstrumentAvailability"
        base_currency:
          $ref: "#/components/schemas/CurrencyName"
    FxInstrumentList:
      type: array
      items:
        $ref: "#/components/schemas/FxInstrument"
    Instrument:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/InstrumentName"
        quote_currency:
          $ref: "#/components/schemas/CurrencyName"
        enabled:
          $ref: "#/components/schemas/InstrumentAvailability"
    InstrumentList:
      type: array
      items:
        $ref: "#/components/schemas/Instrument"
    PriceVolume:
      type: object
      properties:
        price:
          type: number
          example: 120
        volume:
          type: number
          example: 80
    OrderBook:
      type: object
      properties:
        sell:
          type: array
          items:
            $ref: "#/components/schemas/PriceVolume"
        buy:
          type: array
          items:
            $ref: "#/components/schemas/PriceVolume"
    TradeOrderSide:
      type: string
      enum:
        - SELL
        - BUY
    TradeOrderType:
      type: string
      enum:
        - LIMIT
        - MARKET
        - STOPLOSS
        - STOPLIMIT
    TradeOrderTimeInForce:
      type: string
      enum:
        - GTC
        - IOC
        - FOK
        - GTD
        - GTT
    TradeOrderStatus:
      type: string
      enum:
        - OPEN
        - REJECTED
        - CANCELLED
        - PARTIALLY_CANCELLED
        - PARTIALLY_REJECTED
        - FILLED
        - REJECTED
    MoneyAmount:
      type: string
      format: decimal
      example: "100.50"
    DateTime:
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
    TradeOrder:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        instrument:
          $ref: "#/components/schemas/InstrumentName"
        side:
          $ref: "#/components/schemas/TradeOrderSide"
        type:
          $ref: "#/components/schemas/TradeOrderType"
        timeInForce:
          $ref: "#/components/schemas/TradeOrderTimeInForce"
        status:
          $ref: "#/components/schemas/TradeOrderStatus"
        price:
          $ref: "#/components/schemas/MoneyAmount"
        amount:
          $ref: "#/components/schemas/MoneyAmount"
        openAmount:
          $ref: "#/components/schemas/MoneyAmount"
        created:
          $ref: "#/components/schemas/DateTime"
    TradeOrderList:
      type: array
      items:
        $ref: "#/components/schemas/TradeOrder"
    PaymentAccount:
      type: object
      description: Payment account available to user
      properties:
        id:
          $ref: "#/components/schemas/Id"
        currency:
          $ref: "#/components/schemas/CurrencyName"
        amount:
          $ref: "#/components/schemas/MoneyAmount"
        amountReserved:
          $ref: "#/components/schemas/MoneyAmount"
        amountAvailable:
          $ref: "#/components/schemas/MoneyAmount"
    PaymentAccountList:
      type: object
      description: List of payment accounts available to user
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PaymentAccount"
      example:
        data:
          - name: USD
            precision: 2
          - name: BTC
            precision: 5
    Trade:
      type: object
      description: Executed trade
      properties:
        id:
          $ref: "#/components/schemas/Id"
    TradeList:
      type: array
      description: List of executed trades
      items:
        $ref: "#/components/schemas/Trade"
    TradingAccountInstrument:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/InstrumentName"
        amount:
          $ref: "#/components/schemas/MoneyAmount"
        amountReserved:
          $ref: "#/components/schemas/MoneyAmount"
        amountAvailable:
          $ref: "#/components/schemas/MoneyAmount"
        value:
          $ref: "#/components/schemas/MoneyAmount"
        currency:
          $ref: "#/components/schemas/CurrencyName"
      required:
        - name
        - amount
        - amountReserved
        - amountAvailable
        - value
        - currency
    TradingAccount:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        instruments:
          type: array
          items:
            $ref: "#/components/schemas/TradingAccountInstrument"
      required:
        - id
        - instruments
    AppEntityExternalId:
      type: string
      description: External id
    AppEntity:
      type: object
      description: Registered user
      properties:
        id:
          $ref: "#/components/schemas/Id"
        external_id:
          $ref: "#/components/schemas/AppEntityExternalId"
    AppEntityList:
      type: array
      description: List of registered users
      items:
        $ref: "#/components/schemas/AppEntity"
    PaymentType:
      type: string
      enum:
        - DEPOSIT
        - WITHDRAWAL
        - TRANSFER
        - INSTRUMENT_BUY
        - INSTRUMENT_SELL
        - CHARGE
    PaymentDetails:
      type: string
      example: Bank deposit Bank REF123456
    PaymentExternalReferenceNumber:
      type: string
      example: REF123456
    Payment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          $ref: "#/components/schemas/PaymentType"
        amount:
          $ref: "#/components/schemas/MoneyAmount"
        currency:
          $ref: "#/components/schemas/CurrencyName"
        senderAccountId:
          $ref: "#/components/schemas/Id"
        beneficiaryAccountId:
          $ref: "#/components/schemas/Id"
        details:
          $ref: "#/components/schemas/PaymentDetails"
        externalReferenceNumber:
          $ref: "#/components/schemas/PaymentExternalReferenceNumber"
        status:
          type: string
        debitBalanceAmount:
          $ref: "#/components/schemas/MoneyAmount"
        creditBalanceAmount:
          $ref: "#/components/schemas/MoneyAmount"
      required:
        - id
        - type
        - amount
        - currency
        - senderAccountId
        - beneficiaryAccountId
        - details
        - externalReferenceNumber
        - status
  parameters:
    TradingAccountId:
      name: trading_account_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    TradeId:
      name: trade_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
