openapi: 3.1.0
info:
  description: |
    # Introduction
    This API is documented in **OpenAPI 3.0 format**.

    This API the following operations:
    * Retrieve a list of available instruments
    * Retrieve a list of executed trades

    # Basics
    * API calls have to be secured with HTTPS.
    * All data has to be submitted UTF-8 encoded.
    * The reply is sent JSON encoded.
  title: OPEN OUTCRY API
  version: 1.0.0
servers:
- url: http://localhost:4000
tags:
- description: User facing resources for management by a specific user of their accounts
  name: user
- description: Public facing resources pertaining to exchange in general
  name: public
- description: Admin facing resources for exchange management
  name: admin
paths:
  /currencies:
    get:
      description: Returns list of available currencies
      operationId: getCurrencies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
          description: Success
        "404":
          description: Error
      summary: Currencies list
      tags:
      - public
  /fxinstruments:
    get:
      description: Returns list of available fx instruments
      operationId: getFxInstruments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxInstrumentList'
          description: Success
        "404":
          description: Not found
      summary: Fx instrument list
      tags:
      - public
  /instruments:
    get:
      description: Returns list of available instruments
      operationId: getInstruments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentList'
          description: Success
        "404":
          description: Not found
      summary: Instrument list
      tags:
      - public
  /order_books/{instrument_name}:
    get:
      description: Returns an order book for an specific instrument
      operationId: getOrderBook
      parameters:
      - explode: false
        in: path
        name: instrument_name
        required: true
        schema:
          $ref: '#/components/schemas/InstrumentName'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBook'
          description: order book
        "404":
          description: Order book not found for instrument
      summary: Get order book
      tags:
      - public
  /book_orders/{trading_account_id}:
    get:
      description: Returns list of user's trade orders currently on the order book
      operationId: getBookOrders
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOrderList'
          description: Success
        "404":
          description: Error
      summary: Get book orders
      tags:
      - user
  /payment-accounts/{app_entity_id}:
    get:
      description: Returns list of user's payment accounts
      operationId: getPaymentAccounts
      parameters:
      - explode: false
        in: path
        name: app_entity_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAccountList'
          description: Success
        "404":
          description: Error
      summary: Get payment accounts
      tags:
      - user
  /trades/{trading_account_id}/id/{trade_id}:
    delete:
      description: Cancels a trade order by id
      operationId: deleteTradeById
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      - $ref: '#/components/parameters/TradeId'
      responses:
        "204":
          description: Success
        "404":
          description: Error
      summary: Cancel trade
      tags:
      - user
    get:
      description: Returns a trade by id
      operationId: getTradeById
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      - $ref: '#/components/parameters/TradeId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
          description: Success
        "404":
          description: Error
      summary: Get trade
      tags:
      - user
  /trades/{trading_account_id}:
    get:
      description: Returns list of entity's trades
      operationId: getTrades
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeList'
          description: Success
        "404":
          description: Error
      summary: Trades list
      tags:
      - user
  /trade_orders/{trading_account_id}:
    get:
      description: Returns list of user's trade orders
      operationId: getTradeOrders
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOrderList'
          description: Success
        "404":
          description: Error
      summary: Get trade orders
      tags:
      - user
    post:
      description: Creates a trade order
      operationId: createTrade
      parameters:
      - $ref: '#/components/parameters/TradingAccountId'
      requestBody:
        content:
          application/json:
            example:
              instrument: BTC-EUR
              side: SELL
              type: LIMIT
              timeInForce: GTC
              amount: "100"
              price: "100.00"
            schema:
              $ref: '#/components/schemas/createTrade_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOrder'
          description: Success
        "404":
          description: Error
      summary: Create trade order
      tags:
      - users
  /trading_account/{trading_account_id}:
    get:
      description: Returns user's trading account
      operationId: getTradingAccount
      parameters:
      - explode: false
        in: path
        name: trading_account_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingAccount'
          description: Success
        "404":
          description: Error
      summary: Get trading account
      tags:
      - user
  /apps/{app_entity_id}:
    get:
      description: Return registered user by external id
      operationId: getAppEntity
      parameters:
      - explode: false
        in: path
        name: app_entity_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppEntity'
          description: Success
        "404":
          description: Error
      summary: Get application entity
      tags:
      - admin
  /apps:
    get:
      description: Return a list of registered users
      operationId: getAppEntities
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppEntityList'
          description: Success
        "404":
          description: Error
      summary: Get application entities
      tags:
      - admin
  /apps/payments/{payment_id}:
    post:
      description: Returns payment information
      operationId: getAdminPaymentById
      parameters:
      - explode: false
        in: path
        name: payment_id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: Success
        "404":
          description: Error
      summary: Get payment
      tags:
      - admin
  /apps/payments:
    post:
      description: Creates a payment on user's account
      operationId: createAdminPayment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: Success
        "404":
          description: Error
      summary: Create admin payment
      tags:
      - admin
components:
  parameters:
    TradingAccountId:
      explode: false
      in: path
      name: trading_account_id
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    TradeId:
      explode: false
      in: path
      name: trade_id
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
  schemas:
    CurrencyName:
      description: ISO 4217 Currency symbol
      example: USD
    Currency:
      description: Currency of payment account
      properties:
        name:
          description: ISO 4217 Currency symbol
          example: USD
        precision:
          description: Currency precision as number of decimal points
          example: 2
    CurrencyList:
      description: List of currencies supported by app
      example:
        data:
        - name: USD
          precision: 2
        - name: BTC
          precision: 5
      properties:
        data:
          items:
            $ref: '#/components/schemas/Currency'
    Id:
      example: 29b6e916-0d74-41c3-b004-eb8373bca606
      format: uuid
    InstrumentName:
      description: "Ticker-like name of the instrument. For monetary instruments,\
        \ a currency pair is used."
      example: BTC-EUR
    InstrumentAvailability:
      description: Availability for trading
      example: true
    FxInstrument:
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        name:
          description: "Ticker-like name of the instrument. For monetary instruments,\
            \ a currency pair is used."
          example: BTC-EUR
        quote_currency:
          description: ISO 4217 Currency symbol
          example: USD
        enabled:
          description: Availability for trading
          example: true
        base_currency:
          description: ISO 4217 Currency symbol
          example: USD
    FxInstrumentList:
      items:
        $ref: '#/components/schemas/FxInstrument'
    Instrument:
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        name:
          description: "Ticker-like name of the instrument. For monetary instruments,\
            \ a currency pair is used."
          example: BTC-EUR
        quote_currency:
          description: ISO 4217 Currency symbol
          example: USD
        enabled:
          description: Availability for trading
          example: true
    InstrumentList:
      items:
        $ref: '#/components/schemas/Instrument'
    PriceVolume:
      properties:
        price:
          example: 120
        volume:
          example: 80
    OrderBook:
      example:
        sell: ""
        buy: ""
      properties:
        sell:
          items:
            $ref: '#/components/schemas/PriceVolume'
        buy:
          items:
            $ref: '#/components/schemas/PriceVolume'
    TradeOrderSide:
      enum:
      - SELL
      - BUY
    TradeOrderType:
      enum:
      - LIMIT
      - MARKET
      - STOPLOSS
      - STOPLIMIT
    TradeOrderTimeInForce:
      enum:
      - GTC
      - IOC
      - FOK
      - GTD
      - GTT
    TradeOrderStatus:
      enum:
      - OPEN
      - REJECTED
      - CANCELLED
      - PARTIALLY_CANCELLED
      - PARTIALLY_REJECTED
      - FILLED
      - REJECTED
    MoneyAmount:
      example: "100.50"
      format: decimal
    DateTime:
      example: 2017-07-21T17:32:28Z
      format: date-time
    TradeOrder:
      example:
        side: null
        amount: "100.50"
        price: "100.50"
        created: 2017-07-21T17:32:28Z
        instrument: BTC-EUR
        id: 29b6e916-0d74-41c3-b004-eb8373bca606
        type: null
        timeInForce: null
        openAmount: "100.50"
        status: null
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        instrument:
          description: "Ticker-like name of the instrument. For monetary instruments,\
            \ a currency pair is used."
          example: BTC-EUR
        side:
          $ref: '#/components/schemas/TradeOrderSide'
        type:
          $ref: '#/components/schemas/TradeOrderType'
        timeInForce:
          $ref: '#/components/schemas/TradeOrderTimeInForce'
        status:
          $ref: '#/components/schemas/TradeOrderStatus'
        price:
          example: "100.50"
          format: decimal
        amount:
          example: "100.50"
          format: decimal
        openAmount:
          example: "100.50"
          format: decimal
        created:
          example: 2017-07-21T17:32:28Z
          format: date-time
    TradeOrderList:
      items:
        $ref: '#/components/schemas/TradeOrder'
    PaymentAccount:
      description: Payment account available to user
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        currency:
          description: ISO 4217 Currency symbol
          example: USD
        amount:
          example: "100.50"
          format: decimal
        amountReserved:
          example: "100.50"
          format: decimal
        amountAvailable:
          example: "100.50"
          format: decimal
    PaymentAccountList:
      description: List of payment accounts available to user
      example:
        data:
        - name: USD
          precision: 2
        - name: BTC
          precision: 5
      properties:
        data:
          items:
            $ref: '#/components/schemas/PaymentAccount'
    Trade:
      description: Executed trade
      example:
        id: 29b6e916-0d74-41c3-b004-eb8373bca606
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
    TradeList:
      description: List of executed trades
      items:
        $ref: '#/components/schemas/Trade'
    TradingAccountInstrument:
      properties:
        name:
          description: "Ticker-like name of the instrument. For monetary instruments,\
            \ a currency pair is used."
          example: BTC-EUR
        amount:
          example: "100.50"
          format: decimal
        amountReserved:
          example: "100.50"
          format: decimal
        amountAvailable:
          example: "100.50"
          format: decimal
        value:
          example: "100.50"
          format: decimal
        currency:
          description: ISO 4217 Currency symbol
          example: USD
      required:
      - amount
      - amountAvailable
      - amountReserved
      - currency
      - name
      - value
    TradingAccount:
      example:
        instruments: ""
        id: 29b6e916-0d74-41c3-b004-eb8373bca606
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        instruments:
          items:
            $ref: '#/components/schemas/TradingAccountInstrument'
      required:
      - id
      - instruments
    AppEntityExternalId:
      description: External id
    AppEntity:
      description: Registered user
      example:
        external_id: ""
        id: 29b6e916-0d74-41c3-b004-eb8373bca606
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        external_id:
          description: External id
    AppEntityList:
      description: List of registered users
      items:
        $ref: '#/components/schemas/AppEntity'
    PaymentType:
      enum:
      - DEPOSIT
      - WITHDRAWAL
      - TRANSFER
      - INSTRUMENT_BUY
      - INSTRUMENT_SELL
      - CHARGE
    PaymentDetails:
      example: Bank deposit Bank REF123456
    PaymentExternalReferenceNumber:
      example: REF123456
    Payment:
      example:
        amount: "100.50"
        debitBalanceAmount: "100.50"
        creditBalanceAmount: "100.50"
        currency: USD
        beneficiaryAccountId: 29b6e916-0d74-41c3-b004-eb8373bca606
        details: Bank deposit Bank REF123456
        externalReferenceNumber: REF123456
        id: 29b6e916-0d74-41c3-b004-eb8373bca606
        type: null
        senderAccountId: 29b6e916-0d74-41c3-b004-eb8373bca606
        status: ""
      properties:
        id:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        type:
          $ref: '#/components/schemas/PaymentType'
        amount:
          example: "100.50"
          format: decimal
        currency:
          description: ISO 4217 Currency symbol
          example: USD
        senderAccountId:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        beneficiaryAccountId:
          example: 29b6e916-0d74-41c3-b004-eb8373bca606
          format: uuid
        details:
          example: Bank deposit Bank REF123456
        externalReferenceNumber:
          example: REF123456
        status: {}
        debitBalanceAmount:
          example: "100.50"
          format: decimal
        creditBalanceAmount:
          example: "100.50"
          format: decimal
      required:
      - amount
      - beneficiaryAccountId
      - currency
      - details
      - externalReferenceNumber
      - id
      - senderAccountId
      - status
      - type
    createTrade_request:
      properties:
        instrument:
          description: "Ticker-like name of the instrument. For monetary instruments,\
            \ a currency pair is used."
          example: BTC-EUR
        side:
          $ref: '#/components/schemas/TradeOrderSide'
        type:
          $ref: '#/components/schemas/TradeOrderType'
        timeInForce:
          $ref: '#/components/schemas/TradeOrderTimeInForce'
        amount:
          example: "100.50"
          format: decimal
        price:
          example: "100.50"
          format: decimal
      required:
      - amount
      - instrument
      - side
      - timeInForce
      - type
