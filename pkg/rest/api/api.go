/*
 * OPEN OUTCRY API
 *
 * # Introduction This API is {cumented in **OpenAPI 3.0 format**.  This API the following operations: * Retrieve a list of available instruments  * Retrieve a list of executed trades   # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"
)



// InstrumentsAPIRouter defines the required methods for binding the api requests to a responses for the InstrumentsAPI
// The InstrumentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InstrumentsAPIServicer to perform the required actions, then write the service results to the http response.
type InstrumentsAPIRouter interface { 
	GetInstruments(http.ResponseWriter, *http.Request)
}
// OrderBooksAPIRouter defines the required methods for binding the api requests to a responses for the OrderBooksAPI
// The OrderBooksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a OrderBooksAPIServicer to perform the required actions, then write the service results to the http response.
type OrderBooksAPIRouter interface { 
	GetOrderBook(http.ResponseWriter, *http.Request)
}
// TradeOrderAPIRouter defines the required methods for binding the api requests to a responses for the TradeOrderAPI
// The TradeOrderAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TradeOrderAPIServicer to perform the required actions, then write the service results to the http response.
type TradeOrderAPIRouter interface { 
	GetTradeOrders(http.ResponseWriter, *http.Request)
}
// TradesAPIRouter defines the required methods for binding the api requests to a responses for the TradesAPI
// The TradesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TradesAPIServicer to perform the required actions, then write the service results to the http response.
type TradesAPIRouter interface { 
	GetTrades(http.ResponseWriter, *http.Request)
}


// InstrumentsAPIServicer defines the api actions for the InstrumentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InstrumentsAPIServicer interface { 
	GetInstruments(context.Context) (ImplResponse, error)
}


// OrderBooksAPIServicer defines the api actions for the OrderBooksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OrderBooksAPIServicer interface { 
	GetOrderBook(context.Context, string) (ImplResponse, error)
}


// TradeOrderAPIServicer defines the api actions for the TradeOrderAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TradeOrderAPIServicer interface { 
	GetTradeOrders(context.Context) (ImplResponse, error)
}


// TradesAPIServicer defines the api actions for the TradesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TradesAPIServicer interface { 
	GetTrades(context.Context) (ImplResponse, error)
}
