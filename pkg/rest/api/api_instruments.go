/*
 * OPEN OUTCRY API
 *
 * # Introduction This API is {cumented in **OpenAPI 3.0 format**.  This API the following operations: * Retrieve a list of available instruments  * Retrieve a list of executed trades   # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// InstrumentsAPIController binds http requests to an api service and writes the service results to the http response
type InstrumentsAPIController struct {
	service InstrumentsAPIServicer
	errorHandler ErrorHandler
}

// InstrumentsAPIOption for how the controller is set up.
type InstrumentsAPIOption func(*InstrumentsAPIController)

// WithInstrumentsAPIErrorHandler inject ErrorHandler into controller
func WithInstrumentsAPIErrorHandler(h ErrorHandler) InstrumentsAPIOption {
	return func(c *InstrumentsAPIController) {
		c.errorHandler = h
	}
}

// NewInstrumentsAPIController creates a default api controller
func NewInstrumentsAPIController(s InstrumentsAPIServicer, opts ...InstrumentsAPIOption) Router {
	controller := &InstrumentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the InstrumentsAPIController
func (c *InstrumentsAPIController) Routes() Routes {
	return Routes{
		"GetInstruments": Route{
			strings.ToUpper("Get"),
			"/instruments",
			c.GetInstruments,
		},
	}
}

// GetInstruments - instrument list
func (c *InstrumentsAPIController) GetInstruments(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetInstruments(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
