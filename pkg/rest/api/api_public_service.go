/*
 * OPEN OUTCRY API
 *
 * # Introduction This API is documented in **OpenAPI 3.0 format**.  This API the following operations: * Retrieve a list of available instruments * Retrieve a list of executed trades  # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"
	"open-outcry/pkg/models"
	"open-outcry/pkg/services"
	"open-outcry/pkg/utils"
)

// PublicAPIService is a service that implements the logic for the PublicAPIServicer
// This service should implement the business logic for every endpoint for the PublicAPI API.
// Include any external packages or services that will be required by this service.
type PublicAPIService struct {
}

// NewPublicAPIService creates a default api service
func NewPublicAPIService() PublicAPIServicer {
	return &PublicAPIService{}
}

// GetCurrencies - Currencies list
func (s *PublicAPIService) GetCurrencies(ctx context.Context) (ImplResponse, error) {
	currencies := models.GetCurrencies()
	res := make([]Currency, 0)
	for _, v := range currencies {
		cur := Currency{
			Name:      string(v.Name),
			Precision: int32(v.Precision),
		}
		res = append(res, cur)
	}

	return Response(http.StatusOK, res), nil
}

// GetFxInstruments - Fx instrument list
func (s *PublicAPIService) GetFxInstruments(ctx context.Context) (ImplResponse, error) {
	instruments := models.GetFxInstruments()
	res := make([]FxInstrument, 0)

	for _, item := range instruments {
		res = append(res, FxInstrument{
			Id:            string(item.Id),
			Name:          string(item.Name),
			QuoteCurrency: string(item.QuoteCurrency),
			BaseCurrency:  string(item.BaseCurrency),
			Enabled:       false,
		})
	}

	return Response(http.StatusOK, res), nil
}

// GetInstruments - Instrument list
func (s *PublicAPIService) GetInstruments(ctx context.Context) (ImplResponse, error) {
	instruments := models.GetInstruments()
	res := make([]Instrument, 0)

	for _, item := range instruments {
		res = append(res, Instrument{
			Id:            string(item.Id),
			Name:          string(item.Name),
			QuoteCurrency: string(item.QuoteCurrency),
			Enabled:       false,
		})
	}

	return Response(http.StatusOK, res), nil
}

// GetOrderBook - Get order book
func (s *PublicAPIService) GetOrderBook(ctx context.Context, instrumentName string) (ImplResponse, error) {
	res := services.GetOrderBook(models.InstrumentName(instrumentName))
	orderBook := OrderBook{
		Sell: utils.Map[models.PriceVolume, PriceVolume](res.SellSide, func(v models.PriceVolume) PriceVolume {
			return PriceVolume{
				Price:  float32(v.Price),
				Volume: float32(v.Volume),
			}
		}),
		Buy: utils.Map[models.PriceVolume, PriceVolume](res.BuySide, func(v models.PriceVolume) PriceVolume {
			return PriceVolume{
				Price:  float32(v.Price),
				Volume: float32(v.Volume),
			}
		}),
	}

	return Response(http.StatusOK, orderBook), nil
}
