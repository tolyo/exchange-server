openapi: 3.1.0
info:
  description: |
    # Introduction
    This API is documented in **OpenAPI 3.0 format**.

    This API the following operations:
    * Retrieve a list of available instruments
    * Retrieve a list of executed trades

    # Basics
    * API calls have to be secured with HTTPS.
    * All data has to be submitted UTF-8 encoded.
    * The reply is sent JSON encoded.
  version: 1.0.0
  title: OPEN OUTCRY API
servers:
  - url: http://localhost:4000
tags:
  - name: user
    description: User facing resources for management by a specific user of their accounts
  - name: public
    description: Public facing resources pertaining to exchange in general
  - name: admin
    description: Admin facing resources for exchange management
paths:
  /currencies:
    get:
      tags:
        - public
      summary: Currencies list
      description: Returns list of available currencies
      operationId: getCurrencies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
        '500':
          description: Error
  /fxinstruments:
    get:
      tags:
        - public
      summary: Fx instrument list
      description: Returns list of available fx instruments
      operationId: getFxInstruments
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxInstrumentList'
        '404':
          description: Not found
  /instruments:
    get:
      tags:
        - public
      summary: Instrument list
      description: Returns list of available instruments
      operationId: getInstruments
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentList'
        '404':
          description: Not found
  /order_books/{instrument_name}:
    get:
      tags:
        - public
      summary: Get order book
      description: Returns an order book for an specific instrument
      operationId: getOrderBook
      parameters:
        - in: path
          name: instrument_name
          required: true
          schema:
            $ref: '#/components/schemas/InstrumentName'
      responses:
        '200':
          description: order book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBook'
        '404':
          description: Order book not found for instrument
  /trades/{trading_account_id}:
    get:
      tags:
        - user
      summary: trades list
      description: Returns list of entity's trades
      operationId: getTrades
      parameters:
        - $ref: '#/components/parameters/TradingAccountId'
        - $ref: '#/components/parameters/TradeId'
      responses:
        '200':
          description: trades list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeList'
        '500':
          description: Error
  /trades/{trading_account_id}/id/{trade_id}:
    get:
      tags:
        - user
      summary: trades list
      description: Returns list of entity's trades
      operationId: getTrades
      parameters:
        - $ref: '#/components/parameters/TradingAccountId'
        - $ref: '#/components/parameters/TradeId'
      responses:
        '200':
          description: trades list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeList'
        '500':
          description: Error
  /trades:
    get:
      tags:
        - user
      summary: trades list
      description: Returns list of entity's trades
      operationId: getTrades
      parameters:
        - $ref: '#/components/parameters/TradingAccountId'
        - $ref: '#/components/parameters/TradeId'
      responses:
        '200':
          description: trades list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeList'
        '500':
          description: Error
  /trade_orders/{trading_account_id}:
    get:
      tags:
        - user
      summary: Get trade orders
      description: Returns list of user's active trade orders
      operationId: getTradeOrders
      parameters:
        - $ref: '#/components/parameters/TradingAccountId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOrderList'
        '500':
          description: Error
    post:
      tags:
        - users
      summary: Create trade order
      description: Creates a trade order
      operationId: createTrade
      parameters:
        - $ref: '#/components/parameters/TradingAccountId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeOrder'
        '500':
          description: Error
  /apps/{app_entity_id}:
    get:
      tags:
        - admin
      summary: Get application entity
      description: Return registered user by external id
      operationId: getAppEntity
      parameters:
        - in: path
          name: external_id
          required: true
          schema:
            $ref: '#/components/schemas/AppEntityExternalId'
      responses:
        '200':
          description: List of registered users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppEntity'
        '404':
          description: Error
  /apps:
    get:
      tags:
        - admin
      summary: Get application entities
      description: Return a list of registered users
      operationId: getAppEntities
      responses:
        '200':
          description: List of registered users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppEntityList'
        '500':
          description: Error
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    CurrencyName:
      type: string
      description: ISO 4217 Currency symbol
      example: USD
    Currency:
      type: object
      description: Currency of payment account
      properties:
        name:
          $ref: '#/components/schemas/CurrencyName'
        precision:
          type: integer
          description: Currency precision as number of decimal points
          example: 2
    CurrencyList:
      type: object
      description: List of currencies supported by app
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
      example:
        data:
          - name: USD
            precision: 2
          - name: BTC
            precision: 5
    Id:
      type: string
      format: uuid
      example: 29b6e916-0d74-41c3-b004-eb8373bca606
    InstrumentName:
      type: string
      description: Ticker-like name of the instrument. For monetary instruments, a currency pair is used.
      example: BTC-EUR
    InstrumentAvailability:
      type: boolean
      description: Availability for trading
      example: true
    FxInstrument:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/InstrumentName'
        quote_currency:
          $ref: '#/components/schemas/CurrencyName'
        enabled:
          $ref: '#/components/schemas/InstrumentAvailability'
        base_currency:
          $ref: '#/components/schemas/CurrencyName'
    FxInstrumentList:
      type: array
      items:
        $ref: '#/components/schemas/FxInstrument'
    Instrument:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/InstrumentName'
        quote_currency:
          $ref: '#/components/schemas/CurrencyName'
        enabled:
          $ref: '#/components/schemas/InstrumentAvailability'
    InstrumentList:
      type: array
      items:
        $ref: '#/components/schemas/Instrument'
    PriceVolume:
      type: object
      properties:
        price:
          type: number
          example: 120
        volume:
          type: number
          example: 80
    OrderBook:
      type: object
      properties:
        sell:
          type: array
          items:
            $ref: '#/components/schemas/PriceVolume'
        buy:
          type: array
          items:
            $ref: '#/components/schemas/PriceVolume'
    Trade:
      type: object
      description: Executed trade
      properties:
        id:
          $ref: '#/components/schemas/Id'
    TradeList:
      type: array
      description: List of executed trades
      items:
        $ref: '#/components/schemas/Trade'
    TradeOrderSide:
      type: string
      enum:
        - SELL
        - BUY
    TradeOrderTimeInForce:
      type: string
      enum:
        - GTC
        - IOC
        - FOK
        - GTD
        - GTT
    TradeOrderStatus:
      type: string
      enum:
        - OPEN
        - REJECTED
        - CANCELLED
    TradeOrder:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        instrument:
          $ref: '#/components/schemas/InstrumentName'
        side:
          $ref: '#/components/schemas/TradeOrderSide'
        timeInForce:
          $ref: '#/components/schemas/TradeOrderTimeInForce'
        status:
          $ref: '#/components/schemas/TradeOrderStatus'
    TradeOrderList:
      type: array
      items:
        $ref: '#/components/schemas/TradeOrder'
    AppEntityExternalId:
      type: string
      description: External id
    AppEntity:
      type: object
      description: Registered user
      properties:
        id:
          $ref: '#/components/schemas/Id'
        external_id:
          $ref: '#/components/schemas/AppEntityExternalId'
    AppEntityList:
      type: array
      description: List of registered users
      items:
        $ref: '#/components/schemas/AppEntity'
  parameters:
    TradingAccountId:
      name: trading_account_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    TradeId:
      name: trade_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
