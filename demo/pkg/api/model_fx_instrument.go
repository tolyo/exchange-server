/*
OPEN OUTCRY API

# Introduction This API is documented in **OpenAPI 3.0 format**.  This API the following operations: * Retrieve a list of available instruments * Retrieve a list of executed trades  # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the FxInstrument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FxInstrument{}

// FxInstrument struct for FxInstrument
type FxInstrument struct {
	Id *string `json:"id,omitempty"`
	// Ticker-like name of the instrument. For monetary instruments, a currency pair is used.
	Name *string `json:"name,omitempty"`
	// ISO 4217 Currency symbol
	QuoteCurrency *string `json:"quote_currency,omitempty"`
	// ISO 4217 Currency symbol
	BaseCurrency *string `json:"base_currency,omitempty"`
	// Availability for trading
	Enabled *bool `json:"enabled,omitempty"`
}

// NewFxInstrument instantiates a new FxInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFxInstrument() *FxInstrument {
	this := FxInstrument{}
	return &this
}

// NewFxInstrumentWithDefaults instantiates a new FxInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFxInstrumentWithDefaults() *FxInstrument {
	this := FxInstrument{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FxInstrument) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FxInstrument) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FxInstrument) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FxInstrument) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FxInstrument) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FxInstrument) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FxInstrument) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FxInstrument) SetName(v string) {
	o.Name = &v
}

// GetQuoteCurrency returns the QuoteCurrency field value if set, zero value otherwise.
func (o *FxInstrument) GetQuoteCurrency() string {
	if o == nil || IsNil(o.QuoteCurrency) {
		var ret string
		return ret
	}
	return *o.QuoteCurrency
}

// GetQuoteCurrencyOk returns a tuple with the QuoteCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FxInstrument) GetQuoteCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCurrency) {
		return nil, false
	}
	return o.QuoteCurrency, true
}

// HasQuoteCurrency returns a boolean if a field has been set.
func (o *FxInstrument) HasQuoteCurrency() bool {
	if o != nil && !IsNil(o.QuoteCurrency) {
		return true
	}

	return false
}

// SetQuoteCurrency gets a reference to the given string and assigns it to the QuoteCurrency field.
func (o *FxInstrument) SetQuoteCurrency(v string) {
	o.QuoteCurrency = &v
}

// GetBaseCurrency returns the BaseCurrency field value if set, zero value otherwise.
func (o *FxInstrument) GetBaseCurrency() string {
	if o == nil || IsNil(o.BaseCurrency) {
		var ret string
		return ret
	}
	return *o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FxInstrument) GetBaseCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.BaseCurrency) {
		return nil, false
	}
	return o.BaseCurrency, true
}

// HasBaseCurrency returns a boolean if a field has been set.
func (o *FxInstrument) HasBaseCurrency() bool {
	if o != nil && !IsNil(o.BaseCurrency) {
		return true
	}

	return false
}

// SetBaseCurrency gets a reference to the given string and assigns it to the BaseCurrency field.
func (o *FxInstrument) SetBaseCurrency(v string) {
	o.BaseCurrency = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FxInstrument) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FxInstrument) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FxInstrument) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FxInstrument) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o FxInstrument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FxInstrument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QuoteCurrency) {
		toSerialize["quote_currency"] = o.QuoteCurrency
	}
	if !IsNil(o.BaseCurrency) {
		toSerialize["base_currency"] = o.BaseCurrency
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableFxInstrument struct {
	value *FxInstrument
	isSet bool
}

func (v NullableFxInstrument) Get() *FxInstrument {
	return v.value
}

func (v *NullableFxInstrument) Set(val *FxInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableFxInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableFxInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFxInstrument(val *FxInstrument) *NullableFxInstrument {
	return &NullableFxInstrument{value: val, isSet: true}
}

func (v NullableFxInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFxInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
