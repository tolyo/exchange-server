/*
OPEN OUTCRY API

Testing AdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "open-outcry/demo/pkg/api"
)

func Test_api_AdminAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AdminAPIService CreateAdminPayment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AdminAPI.CreateAdminPayment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService GetAdminPaymentById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentId string

		resp, httpRes, err := apiClient.AdminAPI.GetAdminPaymentById(context.Background(), paymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService GetAppEntities", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AdminAPI.GetAppEntities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService GetAppEntity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var appEntityId string

		resp, httpRes, err := apiClient.AdminAPI.GetAppEntity(context.Background(), appEntityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
